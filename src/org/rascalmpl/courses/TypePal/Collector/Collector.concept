# Collect constraints for a TModel

.Synopsis
A `Collector` enables the incremental addition of facts, requirements and calculators to a `TModel`.

.Description

A `Collector` is a statefull object that provides all the functions described below
to access and change its internal state. The global services provided by a `Collector` are:

* Register facts, requirements and calculators as collected from the source program.
* Maintain a global (key,value) store to store global information relevant for the collection process. Typical examples are:
  ** Configuration information.
  ** The files that have been imported.
* Maintain scopes. Typically, scopes of functions and blocks.
* Maintain a single value per scope. This enables decoupling the collection of information from separate but related language constructs.
  Typical examples are:
  ** While collecting information from a function declaration: associate the required return type with a new function scope so 
     that return statements in the function body can check that
    (a) they occur inside a function; (b) that the type of their returned value is compatible with the required return type.
  ** While collecting information from an optionally labelled loop statement: associate the label with a new loop scope so that break/continue statements can check that:
    (a) they occur inside a loop statement; (b) which loop statement they should (dis)continue.
* Reporting.

The functions provided by a `Collector` are summarized below:

image::Collector.png[500,500,align="center"]


The `Collector` is represented as a data type with a single constructor
that has fields that correspond to the functions provided by the builder.
For instance, calling the `define` function on a `Collector` named `c` amounts to: `c.define(the-arguments-of-define)`.

Two dozen functions are available that fall into the following categories:

* _Create: create `Collector`, collect information from source program, and build the `TModel`.
* _Define & Use_: define and use identifiers in various ways.
* _Calculate. Require & Facts_: define requirements and calculators and establish facts.
* _Inference_: create new type variables for type inference.
* _Scoping_: enter and leave a scope, ask for current scope.
* _Scope Info_: add information to the current scope or retrieve that information.
* _Global Info_: add global information or retrieve that information.
* _Nested Info_: maintain nested information during collection.
* _Reporting_: report errors and warnings.
* _Composition_: add another TModel to the current one.

The builder functions are applied repeatedly until all
information has been collected from the source program.

Finally, `run` creates the desired `TModel` that will be used by the Solver.
      
== Create
A `Collector` is created using the function `newCollector`. By way of `run` it is converted into a `TModel`.
[source,rascal]
----
Collector newCollector();    
TModel build();
----
Given a parse tree `pt` of the program to be checked, a typical scenario is:
[source,rascal]
----
c = newCollector();
collect(pt, c);
model = c.run();
... continue with Solver ...
----
NOTE: The `collect` function has to be supplied by the author of the type checker and looks like this:
[source,rascal]
----
void collect(LanguageConstruct lc, Collector c){ ... }
----
where:

* `lc` is a syntactic type from the language under consideration.
* `c` is a `Collector`.

NOTE: Each collect function is responsible for visiting its subtrees.
        
== Define & Use

=== Define a name

The function `define` is used to add in the _current_ scope the definition of a name to the TModel:
[source,rascal]
----
void define(str id, IdRole idRole, Tree def, DefInfo info);
----
where:

* `id` is the textual appearance of the name.
* `idRole` is the role played by the name.
* `def` is the part of the parse tree that corresponds to the definition of the name.
* `info` is information to be associated with this definition.

=== Use an unqualified name
There are four functions to describe the occurrence of a name in a parse tree as a use.
The most elementary use of a name is described by:
[source,rascal]
----
void use(Tree occ, set[IdRole] idRoles) use,
----
The parse tree `occ` is a use to be resolved in the current scope in one of the given roles `idRoles`.
The use of a variable in an expression is typically modelled with this use function.

=== Use an unqualified name via a path
The next version of use, represents a use that refers to another tree using a specific path label:
[source,rascal]
----
void useViaPath(Tree occ, set[IdRole] idRoles, PathRole pathRole);
----

=== Use a qualified name

Next we consider the use of qualified names, i.e., a list of identifiers that will be resolved from left to right.
We will call these identifiers (except the last one) qualifiers and the last one the qualified identifier.
[source,rascal]
----
void useQualified(list[str] ids, Tree occ, set[IdRole] idRoles, set[IdRole] qualifierRoles);  
----

Here `ids` is the qualified name, `occ` is the actual occurrence, and there are two sets of roles:
`idRoles` are the possible roles for the qualified identifier iself and `qualifierRolesa are the possible roles for the qualifiers.

=== Use a qualified name via a path
[source,rascal]
----
void useQualifiedViaPath(list[str] ids, Tree occ, set[IdRole] idRoles, set[IdRole] qualifierRoles, PathRole pathRole);   
----  

== Facts, Requirements & Calculators

=== Define a fact
A fact is known type information for a program fragment and is defined using:
[source,rascal]
----
void fact(Tree src, AType tp);
----

=== Define a requirement
[source,rascal]
----
void require(str name, Tree src, list[value] dependencies, void() preds) require;
void requireEager(str name, Tree src, list[value] dependencies, void() preds);
----      

=== Define a calculator
[source,rascal]
----      
void calculate(str name, Tree src, list[value] dependencies, AType() calculator);
void calculateEager(str name, Tree src, list[value] dependencies, AType() calculator);
----

== Inference
[source,rascal]
----   
AType newTypeVar();
----

== Scoping
[source,rascal]
----      
void enterScope(Tree inner);
void leaveScope(Tree inner);
loc () getScope,
----

== Scope Info
[source,rascal]
----    
void setScopeInfo(Key scope, ScopeRole scopeRole, value info);
lrel[Key scope, value scopeInfo]  getScopeInfo(ScopeRole scopeRole);
----

== Global Info
[source,rascal]
----    
void store(str key, value val);
set[value] getStored(str key);
----


== Error reporting
[source,rascal]
----
void reportError(Tree src, str msg);
void reportWarning(Tree src, str msg);
void reportInfo(Tree src, str msg);
----

 
       