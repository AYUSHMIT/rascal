# Architecture of TypePal

.Synopsis
Architectural overview of TypePal

.Description

Type checking using TypePal proceeds in the following stages:

* _Parse_ the program to be analyzed using its syntax definition, the result is a a parse tree;
* _Collect_ facts, requirements and calculators from the parsed program. 
* _Build_ an initial `TModel` using these collected facts, requirements and calculators.
* _Resolve Path_, resolves the semantic links between program parts 
  (as introduced by, e.g., import statements), the result is an enriched `TModel`;
* _Validate_ the enriched `TModel`, the result is a validated and further enriched `TModel`.

This approach is very flexible, since each of the stages can be called separately, enabeling a pipeline with 
user-defined model transformations inbetween.

image::Architecture.png[800,600,align="center"]

This whole process starts with a syntax for the language we want to analyze (let's call that language _L_ for now). 
The _L_ syntax is used to parse the _L_ program we want to type check. The result is a parse tree.

Collecting facts, requirements and calculators from the resulting parse tree is based on the builder pattern:
first a new `Collector` is created and that enables the author of the type checker
to add facts and requirements to the `TModel` depending on the specific input program.
Collection uses the parse tree, the `Collector`, and user-supplied declarations for the types in _L_ 
(user-defined extensions of TypePal's built-in `AType` data type)
as well as rules for collecting facts, requirements and calculators (user-defined `collect` functions). This collection process is strictly _local_ and based
on the nested structure of the parse tree and the result is an initial `TModel`.

In order to add non-local information that crosscuts the tree structure (e.g., an import statement that uses another module),
such _non-local_, _semantic paths_ are resolved in a separate path resolution phase.

After path resolution, an `TModel` is available that can be validated.

The Solver phase can be further specialized by providing in the TypePal configuration additional declarations for:

* When the language _L_ uses subtyping:

  ** Functions to check subtype (`myIsSubType`) and least upperbound (`myLUB`) of two types.
  ** Functions that given the smallest (`myATypeMin`) and largest (`myATypeMax`) element of the type lattice.
    
* Functions to filter the results of name resolution:
    ** `myMayOverload`: determines whether two names are allowed to be overloaded.
    ** `isAcceptableSimple`: accepts or rejects a proposed definition for the use of a simple name in a particular role. Typical concerns are:
       *** enforce definition before use;
       *** check access rights, e.g. visibility.
    ** `isAcceptableQualified`: accepts or rejects a proposed definition for the use of a qualified name in a particular role.
    ** `isAcceptablePath`: accepts or rejects an proposed access path between use and definition.

The result of the Solver is an enriched `TModel` that contains, amongst others, messages regarding violated requirements
or types that could not be computed.
It can also be used to generate other usefull information about the program such as a use-def relation and
the used vocabulary (used for name completion).