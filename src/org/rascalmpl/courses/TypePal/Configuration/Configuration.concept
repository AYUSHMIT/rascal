# TypePal Configuration
  
.Synopsis
Configuration options for TypePal

.Description

TypePal provides configuration options for

* _Name Resolution & Overloading_: configures how names are resolved and which overloading is allowed.
* _Operations on Types_: configures how operations like subtype and least-upper-bound (lub) are defined.
* _Retrieval of Types_: configures how named and structured types are handled.
* _Extension Points_: configures operations before an after solving.
* _Miscellaneous_: 

Here is an overview:

image::TypePalConfig.png[800,800,align="center"]

The Solver phase can be further specialized by providing in the TypePal configuration additional declarations for:

* When the language _L_ uses subtyping:

  ** Functions to check subtype (`myIsSubType`) and least upperbound (`myLUB`) of two types.
  ** Functions that given the smallest (`myATypeMin`) and largest (`myATypeMax`) element of the type lattice.
    
* Functions to filter the results of name resolution:
    ** `myMayOverload`: determines whether two names are allowed to be overloaded.
    ** `isAcceptableSimple`: accepts or rejects a proposed definition for the use of a simple name in a particular role. Typical concerns are:
       *** enforce definition before use;
       *** check access rights, e.g. visibility.
    ** `isAcceptableQualified`: accepts or rejects a proposed definition for the use of a qualified name in a particular role.
    ** `isAcceptablePath`: accepts or rejects an proposed access path between use and definition.

The result of the Solver is an enriched `TModel` that contains, amongst others, messages regarding violated requirements
or types that could not be computed.
It can also be used to generate other usefull information about the program such as a use-def relation and
the used vocabulary (used for name completion).