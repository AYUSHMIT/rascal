@license{
  Copyright (c) 2022 CWI
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
}
@contributor{Jurgen J. Vinju - Jurgen.Vinju@cwi.nl - CWI}
@contributor{Tijs van der Storm - storm@cwi.nl - CWI}
@synopsis{Simple data visualization using graphs}
@description{
This modules provides a simple API to create graph visuals for Rascal
(relational) data, based on [Cytoscape.js](https://js.cytoscape.org/). 

This module is quite new and may undergo some tweaks in the coming time.
}
@examples{
```rascal-shell
import vis::Graphs;
graph([<x,x+1> | x <- [1..100]] + [<100,1>])
```
}
@benefits{
* Easy to use for basic graph layouts.
}
module vis::Graphs

import lang::html::IO;
import Content;
import IO;

@synopsis{A graph plot from a binary relation.}
Content graph(lrel[str x, str y] v, str title="Graph", CytoLayoutName \layout=circle(), map[str,str] nodeStyle=defaultNodeStyle(), map[str,str] edgeStyle=defaultEdgeStyle()) 
    = content(title, graphServer(cytoscape(
        elements=graphData(v),        
        style=[
            cytostyle(
                selector=\node(),
                style=nodeStyle
            ),
            cytostyle(
                selector=\edge(),
                style=edgeStyle
            )
        ],
        \layout=cytolayout(
            name=\layout
        )
    )));

map[str,str] defaultNodeStyle()
    = (
        "background-color" : "lightblue",
        "label" : "data(id)"
    );

map[str,str] defaultEdgeStyle()
    = (
        "width": "3",
        "line-color": "black",
        "target-arrow-color": "black",
        "target-arrow-shape": "triangle",
        "curve-style" : "bezier"
    );

list[CytoData] graphData(lrel[str x, str y] v)
    = [cytodata(\node(e)) | e <- {*v<x>, *v<y>}, bprintln("adding node <e>")] +
      [cytodata(\edge("<from>-<to>", from, to)) | <from, to> <- v, bprintln("adding edge <from> - <to>")]
      ;

data Cytoscape 
    = cytoscape(
        list[CytoData] elements = [],
        list[CytoStyle] style=[],
        CytoLayout \layout = cytolayout()
    );

data CytoData
  = cytodata(CytoElement \data);

data CytoElement
  = \node(str id)
  | \edge(str id, str source, str target)
  ;

data CytoStyle
    = cytostyle(
        CytoSelector selector = \node(),
        map[str,str] style = ()
    );

data CytoSelector
    = \node()
    | \edge()
    ; 

data CytoLayout
    = cytolayout(
        CytoLayoutName name = circle()
    );

data CytoLayoutName
    = grid()
    | circle()
    | breadthfirst()
    | cose()
    ;

@synopsis{this is the main server generator for any graph value}
@description{
Given a Graph value this server captures the value and serves it
as a JSON value to the HTML client generated by ((plotHTML)).
}
Response (Request) graphServer(Cytoscape ch) {
    Response reply(get(/^\/cytoscape/)) {
        return response(ch);
    }

    // returns the main page that also contains the callbacks for retrieving data and configuration
    default Response reply(get(_)) {
        return response(writeHTMLString(plotHTML()));
    }

    return reply;
}

@synopsis{default HTML wrapper for a chart}
private HTMLElement plotHTML()
    = html([
        head([ 
            script([], src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.23.0/cytoscape.umd.js"),
            style([\data("#visualization {
                         '  width: 100%;
                         '  height: 100%;
                         '  position: absolute;
                         '  top: 0px;
                         'left: 0px;
                         '}")])
        ]),
        body([
            div([], id="visualization"),
            script([
                \data(
                    "fetch(\'/cytoscape\').then(resp =\> resp.json()).then(cs =\> {
                    '   cs.container = document.getElementById(\'visualization\');
                    '   cytoscape(cs);
                    '});
                    '")
            ], \type="text/javascript")
        ])
    ]);